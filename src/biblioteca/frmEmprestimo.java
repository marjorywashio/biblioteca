package biblioteca;

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class frmEmprestimo extends javax.swing.JFrame {

    private PessoaDAO pessoaDAO;
    private LivrosDAO livrosDAO;

    public frmEmprestimo() {
        initComponents();
        this.setLocationRelativeTo(null);
        pessoaDAO = new PessoaDAO();
        livrosDAO = new LivrosDAO();
        preencherComboPessoa();
        preencherComboLivros();
        preencherComboDevolucao();
        btnListarActionPerformed(null);
    }

    private void preencherComboPessoa() {
        try {
            // Obtendo a lista de pessoas do PessoaDAO
            ArrayList<PessoaDTO> listaPessoa = pessoaDAO.ListarPessoas();

            // Criando um modelo para o combo de pessoa
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

            model.addElement("Selecionar pessoa");

            // Adicionando os nomes das pessoas ao modelo do combo
            for (PessoaDTO pessoa : listaPessoa) {
                model.addElement(pessoa.getNome());
            }

            // Definindo o modelo no combo de pessoa
            cmbPessoa.setModel(model);
        } catch (Exception e) {
            // Tratamento de exceção
            e.printStackTrace();
        }
    }

    private void preencherComboLivros() {
        try {
            // Obtendo a lista de livros do LivrosDAO
            ArrayList<LivrosDTO> listaLivros = livrosDAO.ListarLivros();

            // Criando um modelo para o combo de livros
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

            model.addElement("Selecionar livro");

            // Adicionando os títulos dos livros ao modelo do combo
            for (LivrosDTO livro : listaLivros) {
                model.addElement(livro.getTitulo_livro());
            }

            // Definindo o modelo no combo de livros
            cmbLivro.setModel(model);
        } catch (Exception e) {
            // Tratamento de exceção
            e.printStackTrace();
        }
    }

    private void preencherComboDevolucao() {
        try {
            // Array de opções para o JComboBox de devolução
            String[] opcoesDevolucao = {"Selecione", "Sim", "Não"};

            // Cria um modelo para o JComboBox com o array de opções
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(opcoesDevolucao);

            // Define o modelo no JComboBox de devolução
            cmbDevolucao.setModel(model);
        } catch (Exception e) {
            // Tratamento de exceção
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnListar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        txtData = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaEmprestimo = new javax.swing.JTable();
        cmbPessoa = new javax.swing.JComboBox<>();
        cmbLivro = new javax.swing.JComboBox<>();
        cmbDevolucao = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btnExcluir = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel2.setFont(new java.awt.Font("French Script MT", 0, 40)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 46, 29));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Cidade");
        jLabel2.setAlignmentY(0.0F);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel1.setBackground(new java.awt.Color(153, 32, 218));
        jLabel1.setFont(new java.awt.Font("French Script MT", 0, 40)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 46, 29));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Empréstimo");
        jLabel1.setAlignmentY(0.0F);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 46, 29));
        jLabel3.setText("Nome");
        jLabel3.setAlignmentY(0.0F);

        jLabel4.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 46, 29));
        jLabel4.setText("Livro");
        jLabel4.setAlignmentY(0.0F);

        jLabel5.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 46, 29));
        jLabel5.setText("Data do empréstimo");
        jLabel5.setAlignmentY(0.0F);

        jLabel6.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 46, 29));
        jLabel6.setText("Devolução");
        jLabel6.setAlignmentY(0.0F);

        btnListar.setBackground(new java.awt.Color(51, 51, 51));
        btnListar.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        btnListar.setForeground(new java.awt.Color(255, 255, 255));
        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        btnSalvar.setBackground(new java.awt.Color(0, 102, 51));
        btnSalvar.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(255, 255, 255));
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(51, 51, 51));
        btnCancelar.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        try {
            txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtData.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N

        TabelaEmprestimo.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        TabelaEmprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Livro", "Data do empréstimo", "Devolução"
            }
        ));
        TabelaEmprestimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabelaEmprestimoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TabelaEmprestimo);

        cmbPessoa.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        cmbPessoa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbLivro.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        cmbLivro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbDevolucao.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        cmbDevolucao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        jLabel7.setFont(new java.awt.Font("French Script MT", 0, 40)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 46, 29));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Empréstimo");
        jLabel7.setAlignmentY(0.0F);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel7))
        );

        btnExcluir.setBackground(new java.awt.Color(255, 51, 51));
        btnExcluir.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        btnExcluir.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20)
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbDevolucao, 0, 155, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(8, 8, 8))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cmbLivro, 0, 441, Short.MAX_VALUE)
                                .addComponent(cmbPessoa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(290, 290, 290)
                                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbLivro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cmbDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExcluir)
                    .addComponent(btnSalvar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnListar))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        try {
            EmprestimoDAO emprestimoDAO = new EmprestimoDAO();
            PessoaDAO pessoaDAO = new PessoaDAO();
            LivrosDAO livroDAO = new LivrosDAO();

            DefaultTableModel model = (DefaultTableModel) TabelaEmprestimo.getModel();
            model.setNumRows(0);
            ArrayList<EmprestimoDTO> lista = emprestimoDAO.listarEmprestimos();

            for (int num = 0; num < lista.size(); num++) {
                EmprestimoDTO emprestimo = lista.get(num);
                String nomePessoa = pessoaDAO.obterNomePessoaPorId(emprestimo.getId_pessoa());
                String nomeLivro = livroDAO.obterNomeLivroPorId(emprestimo.getId_livro());
                String devolucao = emprestimo.getDevolucao() == 1 ? "Sim" : "Não";
                String dataFormatada = new SimpleDateFormat("dd/MM/yyyy").format(emprestimo.getData_emprestimo());

                model.addRow(new Object[]{
                    // Adicione os detalhes do empréstimo à linha da tabela
                    nomePessoa,
                    nomeLivro,
                    dataFormatada,
                    devolucao
                });
            }
        } catch (Exception e) {
            // Trate quaisquer exceções aqui
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnListarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        try {
            // Obtém os dados do empréstimo dos campos
            String id_pessoa = cmbPessoa.getSelectedItem().toString();
            String id_livro = cmbLivro.getSelectedItem().toString();
            int devolucao = cmbDevolucao.getSelectedIndex();
            String dataString = txtData.getText(); // Data do empréstimo

            // Converte a data do formato de texto para o formato Date
            SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
            java.util.Date data_util = formatoData.parse(dataString);
            java.sql.Date data_emprestimo = new java.sql.Date(data_util.getTime());

            // Verifica se um empréstimo está selecionado na tabela
            int selectedRow = TabelaEmprestimo.getSelectedRow();
            if (selectedRow != -1) {
                // Se um empréstimo estiver selecionado, atualiza o empréstimo existente

                // Obtém o ID do empréstimo selecionado na tabela
                DefaultTableModel model = (DefaultTableModel) TabelaEmprestimo.getModel();
                EmprestimoDAO emprestimodao = new EmprestimoDAO();
                int id_emprestimo = emprestimodao.obterIdEmprestimoPorIdPessoaEIdLivro(idPessoaAntesAtualizacao, idLivroAntesAtualizacao, dataAntesAtualizacao);

                // Cria um objeto EmprestimoDTO com o ID do empréstimo e os novos dados
                EmprestimoDTO emprestimoDTO = new EmprestimoDTO();
                emprestimoDTO.setId_emprestimo(id_emprestimo);

                PessoaDAO pessoadao = new PessoaDAO();
                emprestimoDTO.setId_pessoa(pessoadao.obterIdPessoaPorNome(id_pessoa));

                LivrosDAO livrosdao = new LivrosDAO();
                emprestimoDTO.setId_livro(livrosdao.obterIdLivroPorNome(id_livro));

                emprestimoDTO.setDevolucao(devolucao);
                emprestimoDTO.setData_emprestimo(data_emprestimo);

                // Instancia o objeto EmprestimoDAO para realizar a atualização no banco de dados
                EmprestimoDAO emprestimoDAO = new EmprestimoDAO();
                emprestimoDAO.atualizarEmprestimo(emprestimoDTO);

                btnListarActionPerformed(evt);

                cmbPessoa.setSelectedItem("Selecionar pessoa");
                cmbLivro.setSelectedItem("Selecionar livro");
                cmbDevolucao.setSelectedItem("Selecione");
                txtData.setText("");

                JOptionPane.showMessageDialog(this, "Empréstimo atualizado", "Informação", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Se nenhum empréstimo estiver selecionado, cadastra um novo empréstimo

                // Cria um objeto EmprestimoDTO com os dados do novo empréstimo
                EmprestimoDTO emprestimoDTO = new EmprestimoDTO();

                PessoaDAO pessoadao = new PessoaDAO();
                emprestimoDTO.setId_pessoa(pessoadao.obterIdPessoaPorNome(id_pessoa));

                LivrosDAO livrosdao = new LivrosDAO();
                emprestimoDTO.setId_livro(livrosdao.obterIdLivroPorNome(id_livro));

                emprestimoDTO.setDevolucao(devolucao);
                emprestimoDTO.setData_emprestimo(data_emprestimo);

                // Instancia o objeto EmprestimoDAO para cadastrar o novo empréstimo no banco de dados
                EmprestimoDAO emprestimoDAO = new EmprestimoDAO();
                emprestimoDAO.cadastrarEmprestimo(emprestimoDTO);

                btnListarActionPerformed(evt);

                cmbPessoa.setSelectedItem("Selecionar pessoa");
                cmbLivro.setSelectedItem("Selecionar livro");
                cmbDevolucao.setSelectedItem("Selecione");
                txtData.setText("");

                JOptionPane.showMessageDialog(this, "Empréstimo salvo", "Informação", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            // Trate quaisquer exceções aqui
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        cmbPessoa.setSelectedItem("Selecionar pessoa");
        cmbLivro.setSelectedItem("Selecionar livro");
        cmbDevolucao.setSelectedItem("Selecione");
        txtData.setText("");

        frmBiblioteca bibliotecaForm = new frmBiblioteca();
        bibliotecaForm.setVisible(true);
        this.dispose(); // Fecha o formulário atual
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        try {
            // Verifica se um empréstimo está selecionado na tabela
            int selectedRow = TabelaEmprestimo.getSelectedRow();
            if (selectedRow != -1) {
                int confirmacao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir o empréstimo?", "Confirmar Exclusão", JOptionPane.YES_NO_OPTION);
                if (confirmacao == JOptionPane.YES_OPTION) {
                    // Obtém os dados do empréstimo dos campos
                    String id_pessoa = cmbPessoa.getSelectedItem().toString();
                    String id_livro = cmbLivro.getSelectedItem().toString();
                    int devolucao = cmbDevolucao.getSelectedIndex();
                    String dataString = txtData.getText(); // Data do empréstimo

                    // Converte a data do formato de texto para o formato Date
                    SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date data_util = formatoData.parse(dataString);
                    java.sql.Date data_emprestimo = new java.sql.Date(data_util.getTime());

                    // Obtém o ID do empréstimo selecionado na tabela
                    DefaultTableModel model = (DefaultTableModel) TabelaEmprestimo.getModel();
                    EmprestimoDAO emprestimodao = new EmprestimoDAO();
                    int id_emprestimo = emprestimodao.obterIdEmprestimoPorIdPessoaEIdLivro(idPessoaAntesAtualizacao, idLivroAntesAtualizacao, data_emprestimo);

                    // Cria um objeto EmprestimoDTO com o ID do empréstimo e os novos dados
                    EmprestimoDTO emprestimoDTO = new EmprestimoDTO();
                    emprestimoDTO.setId_emprestimo(id_emprestimo);

                    PessoaDAO pessoadao = new PessoaDAO();
                    emprestimoDTO.setId_pessoa(pessoadao.obterIdPessoaPorNome(id_pessoa));

                    LivrosDAO livrosdao = new LivrosDAO();
                    emprestimoDTO.setId_livro(livrosdao.obterIdLivroPorNome(id_livro));

                    emprestimoDTO.setDevolucao(devolucao);
                    emprestimoDTO.setData_emprestimo(data_emprestimo);

                    // Instancia o objeto EmprestimoDAO para realizar a atualização no banco de dados
                    EmprestimoDAO emprestimoDAO = new EmprestimoDAO();
                    emprestimoDAO.ExcluirEmprestimo(id_emprestimo);

                    btnListarActionPerformed(evt);

                    cmbPessoa.setSelectedItem("Selecionar pessoa");
                    cmbLivro.setSelectedItem("Selecionar livro");
                    cmbDevolucao.setSelectedItem("Selecione");
                    txtData.setText("");

                    JOptionPane.showMessageDialog(this, "Empréstimo excluído", "Informação", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um empréstimo para excluir", "Informação", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            // Trate quaisquer exceções aqui
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnExcluirActionPerformed

    int idPessoaAntesAtualizacao;
    int idLivroAntesAtualizacao;
    java.sql.Date dataAntesAtualizacao;
    private void TabelaEmprestimoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelaEmprestimoMouseClicked
        int selectedRow = TabelaEmprestimo.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) TabelaEmprestimo.getModel();

            // Preenche a combobox com a pessoa selecionada
            String pessoa = (String) model.getValueAt(selectedRow, 0); // Coluna da pessoa
            cmbPessoa.setSelectedItem(pessoa);
            PessoaDAO pessoadao = new PessoaDAO();
            try {
                idPessoaAntesAtualizacao = pessoadao.obterIdPessoaPorNome(pessoa);

            } catch (SQLException ex) {
                Logger.getLogger(frmEmprestimo.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            // Preenche a combobox com o livro selecionado
            String livro = (String) model.getValueAt(selectedRow, 1); // Coluna do livro
            cmbLivro.setSelectedItem(livro);
            LivrosDAO livrosdao = new LivrosDAO();
            try {
                idLivroAntesAtualizacao = livrosdao.obterIdLivroPorNome(livro);

            } catch (SQLException ex) {
                Logger.getLogger(frmEmprestimo.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            // Obtém a data como String da coluna adequada (altere o índice conforme necessário)
            String dataString = (String) model.getValueAt(selectedRow, 2);

            // Converte a data de String para java.sql.Date
            try {
                // Define o formato da data que está sendo esperado
                SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
                // Converte a String para um objeto java.util.Date
                java.util.Date dataUtil = formatoData.parse(dataString);
                // Converte java.util.Date para java.sql.Date
                dataAntesAtualizacao = new java.sql.Date(dataUtil.getTime());
            } catch (ParseException ex) {
                ex.printStackTrace();
            }

            // Define a data no campo de texto
            txtData.setText(dataString);

            // Preenche a combobox da devolução
            String devolucao = (String) model.getValueAt(selectedRow, 3); // Coluna da devolução
            cmbDevolucao.setSelectedItem(devolucao);
        }
    }//GEN-LAST:event_TabelaEmprestimoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEmprestimo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEmprestimo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEmprestimo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEmprestimo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmEmprestimo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelaEmprestimo;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<String> cmbDevolucao;
    private javax.swing.JComboBox<String> cmbLivro;
    private javax.swing.JComboBox<String> cmbPessoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField txtData;
    // End of variables declaration//GEN-END:variables
}
