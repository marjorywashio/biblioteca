package biblioteca;

import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import biblioteca.CidadeDAO;
import biblioteca.PessoaDAO;
import java.awt.HeadlessException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;

public class frmPessoa extends javax.swing.JFrame {

    private CidadeDAO cidadeDAO;

    public frmPessoa() {
        initComponents();
        this.setLocationRelativeTo(null);
        cidadeDAO = new CidadeDAO();
        preencherComboCidade();
        btnListarActionPerformed(null);
    }

    private void preencherComboCidade() {
        try {
            // Obtendo a lista de gêneros do GeneroDAO
            ArrayList<CidadeDTO> listaCidade = cidadeDAO.listarCidades();

            // Criando um modelo para o combo de gênero
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

            model.addElement("Selecionar cidade");

            // Adicionando os nomes dos gêneros ao modelo do combo
            for (CidadeDTO cidade : listaCidade) {
                model.addElement(cidade.getNome());
            }

            // Definindo o modelo no combo de cidade
            cmbCidade.setModel(model);
        } catch (Exception e) {
            // Tratamento de exceção
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbCidade = new javax.swing.JComboBox<>();
        btnCancelar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtTelefone = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaPessoa = new javax.swing.JTable();
        btnListar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btnExcluir = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("French Script MT", 0, 40)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 46, 29));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pessoa");
        jLabel1.setAlignmentY(0.0F);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 46, 29));
        jLabel5.setText("Cidade");
        jLabel5.setAlignmentY(0.0F);

        cmbCidade.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        cmbCidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnCancelar.setBackground(new java.awt.Color(51, 51, 51));
        btnCancelar.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setMaximumSize(new java.awt.Dimension(72, 27));
        btnCancelar.setMinimumSize(new java.awt.Dimension(72, 27));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 46, 29));
        jLabel3.setText("Nome");
        jLabel3.setAlignmentY(0.0F);

        txtNome.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        txtNome.setForeground(new java.awt.Color(51, 46, 29));

        txtTelefone.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        txtTelefone.setForeground(new java.awt.Color(51, 46, 29));

        jLabel4.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 46, 29));
        jLabel4.setText("Telefone");
        jLabel4.setAlignmentY(0.0F);

        TabelaPessoa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Telefone", "Cidade"
            }
        ));
        TabelaPessoa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabelaPessoaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TabelaPessoa);

        btnListar.setBackground(new java.awt.Color(51, 51, 51));
        btnListar.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        btnListar.setForeground(new java.awt.Color(255, 255, 255));
        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        btnSalvar.setBackground(new java.awt.Color(0, 102, 51));
        btnSalvar.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(255, 255, 255));
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        jLabel7.setFont(new java.awt.Font("Vivaldi", 0, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 46, 29));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Pessoa");
        jLabel7.setToolTipText("");
        jLabel7.setAlignmentY(0.0F);
        jLabel7.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(247, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(230, 230, 230))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        btnExcluir.setBackground(new java.awt.Color(255, 51, 51));
        btnExcluir.setFont(new java.awt.Font("Poppins Light", 0, 13)); // NOI18N
        btnExcluir.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtTelefone)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSalvar)
                        .addComponent(btnExcluir)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnListar))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        try {
            PessoaDAO objPessoaDAO = new PessoaDAO();
            CidadeDAO cidadeDAO = new CidadeDAO();

            DefaultTableModel model = (DefaultTableModel) TabelaPessoa.getModel();
            model.setNumRows(0);
            ArrayList<PessoaDTO> lista = objPessoaDAO.ListarPessoas();

            for (int num = 0; num < lista.size(); num++) {
                PessoaDTO pessoa = lista.get(num);
                String nomeCidade = cidadeDAO.obterNomeCidadePorId(pessoa.getId_cidade());

                model.addRow(new Object[]{
                    lista.get(num).getNome(),
                    lista.get(num).getTelefone(),
                    nomeCidade});
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnListarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        try {
    // Obtém os dados da pessoa dos campos de texto
    String nome = txtNome.getText();
    String telefone = txtTelefone.getText();

    // Obtém o nome da cidade selecionada no combo box
    String nomeCidade = cmbCidade.getSelectedItem().toString();

    // Obtém o ID da cidade selecionada no combo box
    CidadeDAO cidadeDAO = new CidadeDAO();
    int idCidade = cidadeDAO.obterIdCidadePorNome(nomeCidade);

    // Verifica se uma pessoa está selecionada na tabela
    int selectedRow = TabelaPessoa.getSelectedRow();
    if (selectedRow != -1) {
        // Se uma pessoa estiver selecionada, atualiza a pessoa existente

        // Obtém o ID da pessoa selecionada na tabela
        DefaultTableModel model = (DefaultTableModel) TabelaPessoa.getModel();
        var nomePessoa = model.getValueAt(selectedRow, 0);
        PessoaDAO pessoaDAO = new PessoaDAO();
        int idPessoa = pessoaDAO.obterIdPessoaPorNome(nomePessoa.toString());

        // Cria um objeto PessoaDTO com o ID da pessoa e os novos dados
        PessoaDTO pessoaDTO = new PessoaDTO();
        pessoaDTO.setId_pessoa(idPessoa);
        pessoaDTO.setNome(nome);
        pessoaDTO.setTelefone(telefone);
        pessoaDTO.setId_cidade(idCidade);

        // Instancia o objeto PessoaDAO para realizar a atualização no banco de dados
        pessoaDAO.atualizarPessoa(pessoaDTO);

        // Atualiza a tabela com os novos dados
        btnListarActionPerformed(evt);

        JOptionPane.showMessageDialog(this, "Pessoa atualizada", "Informação", JOptionPane.INFORMATION_MESSAGE);
    } else {
        // Se nenhuma pessoa estiver selecionada, cadastra uma nova pessoa

        // Cria um objeto PessoaDTO com os dados da nova pessoa
        PessoaDTO pessoaDTO = new PessoaDTO();
        pessoaDTO.setNome(nome);
        pessoaDTO.setTelefone(telefone);
        pessoaDTO.setId_cidade(idCidade);

        // Instancia o objeto PessoaDAO para cadastrar a nova pessoa no banco de dados
        PessoaDAO pessoaDAO = new PessoaDAO();
        pessoaDAO.cadastrarPessoa(pessoaDTO);

        // Atualiza a tabela com os novos dados
        btnListarActionPerformed(evt);

        JOptionPane.showMessageDialog(this, "Pessoa salva", "Informação", JOptionPane.INFORMATION_MESSAGE);
    }
} catch (Exception e) {
    // Trate quaisquer exceções aqui
    e.printStackTrace();
}


    }//GEN-LAST:event_btnSalvarActionPerformed
    
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        txtNome.setText(""); // Limpa o valor o JTextField 
        txtTelefone.setText("");
        cmbCidade.setSelectedItem("Selecionar cidade");
        txtNome.requestFocus();

        frmBiblioteca bibliotecaForm = new frmBiblioteca();
        bibliotecaForm.setVisible(true);
        this.dispose(); // Fecha o formulário atual
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        try {
            // Verifica se uma pessoa está selecionada na tabela
            int selectedRow = TabelaPessoa.getSelectedRow();
            if (selectedRow != -1) {
                // Obtém os dados da pessoa selecionada na tabela
                DefaultTableModel model = (DefaultTableModel) TabelaPessoa.getModel();
                String nome = model.getValueAt(selectedRow, 0).toString();

                // Pede confirmação ao usuário antes de excluir a pessoa
                int confirmacao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir a pessoa '" + nome + "'?", "Confirmação de Exclusão", JOptionPane.YES_NO_OPTION);
                if (confirmacao == JOptionPane.YES_OPTION) {
                    // Se o usuário confirmar a exclusão, prossegue com a exclusão da pessoa

                    // Obtém os dados dos campos de texto
                    String nome_pessoa = txtNome.getText();
                    String telefone = txtTelefone.getText();

                    // Obtém o ID da cidade selecionada no ComboBox
                    CidadeDAO cidadedao = new CidadeDAO();
                    String nome_cidade = cmbCidade.getSelectedItem().toString();
                    int id_cidade = cidadedao.obterIdCidadePorNome(nome_cidade);

                    // Obtém o ID da pessoa selecionada na tabela
                    PessoaDAO pessoadao = new PessoaDAO();
                    int id_pessoa = pessoadao.obterIdPessoaPorNome(nome);

                    // Cria um objeto PessoaDTO com os dados da pessoa
                    PessoaDTO pessoaDTO = new PessoaDTO();
                    pessoaDTO.setId_pessoa(id_pessoa);
                    pessoaDTO.setNome(nome_pessoa);
                    pessoaDTO.setTelefone(telefone);
                    pessoaDTO.setId_cidade(id_cidade);

                    // Verifica se a pessoa está cadastrada em um empréstimo
                    EmprestimoDAO emprestimoDAO = new EmprestimoDAO();
                    if (emprestimoDAO.pessoaCadastradaEmEmprestimo(id_pessoa)) {
                        JOptionPane.showMessageDialog(this, "A pessoa selecionada está cadastrada em um empréstimo e não pode ser excluída.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        return; // Sai do método sem excluir a pessoa
                    }

                    // Instancia o objeto PessoaDAO para realizar a exclusão no banco de dados
                    PessoaDAO pessoaDAO = new PessoaDAO();
                    pessoaDAO.ExcluirPessoa(pessoaDTO);

                    // Limpa os campos de texto e o ComboBox
                    txtNome.setText("");
                    txtTelefone.setText("");
                    cmbCidade.setSelectedItem("Selecionar pessoa");
                    txtNome.requestFocus();

                    // Atualiza a tabela com os novos dados
                    btnListarActionPerformed(evt);

                    JOptionPane.showMessageDialog(this, "Pessoa excluída", "Informação", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                // Se nenhuma pessoa estiver selecionada, exibe uma mensagem para selecionar uma pessoa
                JOptionPane.showMessageDialog(this, "Selecione uma pessoa para excluir", "Informação", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (HeadlessException | SQLException e) {
            // Trate quaisquer exceções aqui
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void TabelaPessoaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelaPessoaMouseClicked
        int selectedRow = TabelaPessoa.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) TabelaPessoa.getModel();

            // Preenche os campos de texto com os dados do livro selecionado
            txtNome.setText((String) model.getValueAt(selectedRow, 0)); // Coluna do título
            txtTelefone.setText((String) model.getValueAt(selectedRow, 1)); // Coluna do autor

            // Preenche a combobox com o gênero do livro selecionado
            String cidade = (String) model.getValueAt(selectedRow, 2); // Coluna do gênero
            cmbCidade.setSelectedItem(cidade);
        }
    }//GEN-LAST:event_TabelaPessoaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPessoa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelaPessoa;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<String> cmbCidade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtTelefone;
    // End of variables declaration//GEN-END:variables
}
